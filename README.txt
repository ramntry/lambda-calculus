Kcb - канцелятор (здесь и далее имена с cуффиксом "cb" обознают некоторые классические комбинаторы)
Scb - коннектор
Icb - комбинатор тождества

Tru - истина [Bool] (здесь и далее запись в квадратных скобках будет обозначать тип терма в нотации, близкой Haskell)
Fls - ложь [Bool]

And - конъюнкция [Bool -> Bool -> Bool]
Lor - дизъюнкция [Bool -> Bool -> Bool] (логическое "или")
Not - отрицание [Bool -> Bool]

Zro - ноль [Number] (числа здесь и далее - числа Чёрча)
Inc - инкремент [Number -> Number] (увеличивает свой аргумент на единицу)
One - единица [Number]
Two - 2 [Number]
Add - сложение [Number -> Number -> Number]
Mul - умножение [Number -> Number -> Number] 
Pow - возведение в степень [Number -> Number -> Number] (аргументы следуют в порядке: основание, затем степень)
Dec - декремент [Number -> Number] (уменьшает аргумент на единицу. Примененный к нулю сохраняет его нулем)
Sub - вычитание [Number -> Number -> Number] (если вычитаемое больше уменьшаемого, вычисляет ноль)

Isz - тестирование на ноль [Number -> Bool]
Ycb - Y-комбинатор [infinite type] (infinite type - условное обозначение невыводимого бесконечного типа)
Fct - факториал [Number -> Number]
Fib - число Фиббоначчи с заданным номером [Number -> Number]

      (обозначим тип n-местной композиции (b -> c) -> (a_1 -> ... -> a_n -> b) -> a_1 -> ... -> a_n -> c как COM(n))
Com - композиция [COM(1)]
Cmn - генератор (n+1)-местной композиции из n-местной композиции [COM(n) -> COM(n + 1)]
Cm2 - двуместная композиция [COM(2)]
Rea - инвертор первых двух агрументов [(a -> b -> c) -> b -> a -> c]

Mkp - конструктор пары [a -> b -> (a:b)]
Fst - первый элемент пары [(a:b) -> a]
Snd - второй элемет пары [(a:b) -> b]
Nll - Nil-элемент [Nil]
Isn - тестирование на Nil [(a:b) -> Fls; Nil -> Tru]
Gen - генератор списка чисел Чёрча от 1 до n включительно [Number -> [Number]] (где [a] есть a:(a:(...(a:Nil)...)))

Dim - деление с остатком [Number -> Number -> (Number:Number)] (где первый элемент пары-результата - частное, второй - остаток)
Div - целочисленное частное [Number -> Number]
Mod - остаток от деления [Number -> Number]
Evn - тестирование на четность [Number -> Bool]
Odd - тестирование на нечетность [Number -> Bool]

Flr - foldr [(a -> b -> b) -> b -> [a] -> b] (свертка справа)
Ref - map [(a -> b) -> [a] -> [b]]
Fil - filter [(a -> Bool) -> [a] -> [a]]
Fl2 - фильтр, разбивает список на пару списков из элементов удовлетворяющих условию (1) и нет (2) [(a -> Bool) -> [a] -> ([a]:[a])]
Len - длина списка [[a] -> Number]

Eql - тестирование на равенство чисел Чёрча [Number -> Number -> Bool]
Neq - /= (весь блок имеет тип [Number -> Number -> Bool])
Grt - >
Lss - <
Gre - >=
Lse - <=

Mn2 - минимум из двух чисел Чёрча [Number -> Number -> Number]
Mx2 - максимум из двух чисел Чёрча [Number -> Number -> Number]

Srb - сортировка алгоритом, близким к быстрой сортировке с внешним компаратором [(a -> a -> Bool) -> [a] -> [a]]
Srt - сортировка Srb в неубывающем порядке [[a] -> [a]]
Min - минимальный элемент списка чисел Чёрча [[Number] -> Number]
Max - максимальный элемент списка чисел Чёрча [[Number] -> Number]

Fll - foldl [(b -> a -> b) -> b -> [a] -> b] (свертка слева)
Rev - реверс списка [[a] -> [a]]

Замечания.
Реализация не преследовала целью быть оптимальной, скорее, интересной и экспериментальной.
Файл lambda.lci может быть прочитан в LCI с помощью команды Consult "lambda.lci"
Страница LCI: http://lci.sourceforge.net/

-*- coding: utf-8 -*-
